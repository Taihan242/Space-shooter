#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <windows.h>

// Game area dimensions
#define WIDTH 20
#define HEIGHT 10

// Game variables
int spaceshipX = WIDTH / 2;
int bulletX = -1, bulletY = -1;
int enemyX, enemyY = 0;
int score = 0;
int gameOver = 0;

// Function to clear the console
void clearScreen() {
    system("cls");
}

// Function to set initial enemy position
void initEnemy() {
    enemyX = rand() % WIDTH;
    enemyY = 0;
}

// Function to display the game screen
void display() {
    clearScreen();
    
    // Top border
    for (int i = 0; i < WIDTH + 2; i++) printf("#");
    printf("\n");

    // Game area
    for (int y = 0; y < HEIGHT; y++) {
        printf("#");
        for (int x = 0; x < WIDTH; x++) {
            if (y == HEIGHT - 1 && x == spaceshipX) {
                printf("^"); // Spaceship
            } else if (x == bulletX && y == bulletY) {
                printf("|"); // Bullet
            } else if (x == enemyX && y == enemyY) {
                printf("E"); // Enemy
            } else {
                printf(" ");
            }
        }
        printf("#\n");
    }

    // Bottom border
    for (int i = 0; i < WIDTH + 2; i++) printf("#");
    printf("\n");

    // Display score
    printf("Score: %d\n", score);
}

// Function to update bullet position
void updateBullet() {
    if (bulletY >= 0) {
        bulletY--;
        if (bulletY < 0) {
            bulletX = -1;
        }
    }
}

// Function to update enemy position
void updateEnemy() {
    enemyY++;
    if (enemyY >= HEIGHT) {
        enemyY = 0;
        enemyX = rand() % WIDTH;
    }
}

// Function to check for collision between bullet and enemy
void checkCollision() {
    if (bulletX == enemyX && bulletY == enemyY) {
        score += 10;
        bulletX = -1; // Reset bullet
        bulletY = -1;
        enemyY = 0; // Reset enemy position
        enemyX = rand() % WIDTH;
    }
}

// Function to move the spaceship
void moveSpaceship(char direction) {
    if (direction == 'a' && spaceshipX > 0) {
        spaceshipX--;
    } else if (direction == 'd' && spaceshipX < WIDTH - 1) {
        spaceshipX++;
    }
}

// Function to fire a bullet
void fireBullet() {
    if (bulletY < 0) {
        bulletX = spaceshipX;
        bulletY = HEIGHT - 2;
    }
}

int main() {
    initEnemy();

    while (!gameOver) {
        display();
        updateBullet();
        updateEnemy();
        checkCollision();

        if (_kbhit()) {
            char input = _getch();
            if (input == 'a' || input == 'd') {
                moveSpaceship(input);
            } else if (input == ' ') {
                fireBullet();
            } else if (input == 'q') {
                gameOver = 1;
            }
        }
        
        Sleep(100); // Control game speed
    }

    printf("Game Over! Final Score: %d\n", score);
    return 0;
}
